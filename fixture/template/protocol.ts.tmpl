// notice: file automatically generated by rpcgen
// do not change it unless you know what you're doing

/* tslint:disable variable-name */

import { ISocketClient } from '../lib/socket-utils'

{% for i in struct -%}
{%- set ts = i.code(coder.typescript) -%}
// {{ util.eitherOr(i.desc, ts.structName) }}
export interface {{ ts.structName }} {
  {{ ts.structParams.join('\n  ') | safe }}
}

{% endfor -%}

export class {{ util.toUpperCamelCase(name, '-') }} {
  static libname: string = 'javascript client'
  static version: string = '{{ version }}'
  static hash: string = '{{ document.hash }}'
  client: ISocketClient

  constructor (client: ISocketClient) {
    this.client = client
    this.client.notifications.on('close', () => { this.onClose() })
  }
{%- for i in request -%}
{%- if i.dir === 0 -%}
  {%- set ts = i.code(coder.typescript) %}

  // {{ util.eitherOr(i.desc, ts.funcName) }}
  public {{ ts.funcName }} ({{ ts.funcParams.join(', ') | safe}}): Promise<{{ ts.funcReturn | safe}}> {
    return this.client.request('{{ ts.requestName }}', {{ util.printArray(ts.params) }})
  }
{%- endif -%}
{%- endfor %}

  onClose (): void {
    const list: Array<string> = []
{%- for i in notification -%}
{%- if i.dir === 1 %}
    list.push('{{ i.name }}')
{%- endif -%}
{%- endfor %}
    list.forEach(event => this.client.notifications.removeAllListeners(event))
  }
}

export namespace validate {
{%- for i in struct %}
{%- set ts = i.code(coder.typescript) %}
  export const {{ ts.structName }} = (obj: object): boolean => {
    {% for j in i.storage -%}
    if (!('{{ j.name }}' in obj)) return false
    {% endfor -%}
    return true
  }
{%- endfor %}
}